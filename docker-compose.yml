version: "3.8"

services:
  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    restart: unless-stopped
    container_name: zookeeper
    volumes:
      - data_zookeeper:/var/lib/zookeeper/data
      - data_log_zookeeper:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8084:8080"
    restart: always
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: 'kafka_cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka_1:9092,kafka_2:9092,kafka_3:9092'
      KAFKA_CLUSTERS_0_ZOOKEEPER: 'zookeeper:32181'
    depends_on:
      - zookeeper
      - kafka_1
      - kafka_2
      - kafka_3
    networks:
      - kafka-network

  kafka_1:
    container_name: kafka_1
    image: confluentinc/cp-kafka:7.2.0
    restart: unless-stopped
    volumes:
      - data_kafka_1:/var/lib/kafka/data
      - data_secrets_kafka_1:/etc/kafka/secrets
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_1:9092,OUTSIDE://127.0.0.1:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka_1:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
  kafka_2:
    container_name: kafka_2
    image: confluentinc/cp-kafka:7.2.0
    restart: unless-stopped
    volumes:
      - data_kafka_2:/var/lib/kafka/data
      - data_secrets_kafka_2:/etc/kafka/secrets
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    ports:
      - "9095:9095"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9095
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_2:9092,OUTSIDE://127.0.0.1:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka_2:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
  kafka_3:
    container_name: kafka_3
    image: confluentinc/cp-kafka:7.2.0
    restart: unless-stopped
    volumes:
      - data_kafka_3:/var/lib/kafka/data
      - data_secrets_kafka_3:/etc/kafka/secrets
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    ports:
      - "9096:9096"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9096
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_3:9092,OUTSIDE://127.0.0.1:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka_3:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:6.2.5
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - redis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis_1:
    image: redis:6.2.5
    container_name: redis_1
    ports:
      - "16379:6379"
    networks:
      - redis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis_2:
    image: redis:6.2.5
    container_name: redis_2
    ports:
      - "26379:6379"
    networks:
      - redis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis_3:
    image: redis:6.2.5
    container_name: redis_3
    ports:
      - "36379:6379"
    networks:
      - redis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Postgres
  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: bootstrap
    volumes:
      - data_postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # CockroachDB
  cockroachdb:
    image: cockroachdb/cockroach:v23.2.6
    container_name: cockroachdb
    command: start-single-node --insecure --advertise-addr=cockroachdb
    ports:
      - "26257:26257"
      - "8080:8080"
    volumes:
      - data_cockroachdb:/cockroach/cockroach-data
    networks:
      - cockroachdb-network
    healthcheck:
      test: ["CMD", "cockroach", "node", "status", "--insecure"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Minio
  minio:
    image: minio/minio:RELEASE.2024-06-22T05-26-45Z.fips
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: access_key_minio
      MINIO_SECRET_KEY: secret_key_minio
    volumes:
      - data_minio:/data
    networks:
      - minio-network
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.13.3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    networks:
      - rabbitmq-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Memcached
  memcached_1:
    image: memcached:1.6.10
    container_name: memcached_1
    ports:
      - "11211:11211"
    networks:
      - memcached-network
  memcached_2:
    image: memcached:1.6.10
    container_name: memcached_2
    ports:
      - "21212:11212"
    networks:
      - memcached-network
  memcached_3:
    image: memcached:1.6.10
    container_name: memcached_3
    ports:
      - "31213:11213"
    networks:
      - memcached-network

networks:
  kafka-network:
  redis-network:
  cockroachdb-network:
  minio-network:
  rabbitmq-network:
  memcached-network:

volumes:
  # Kafka
  data_zookeeper:
  data_log_zookeeper:
  data_kafka_1:
  data_secrets_kafka_1:
  data_kafka_2:
  data_secrets_kafka_2:
  data_kafka_3:
  data_secrets_kafka_3:

  # Postgres
  data_postgres:

  # CockroachDB
  data_cockroachdb:

  # MinIO
  data_minio:
