services:
  akhq:
    container_name: akhq
    image: tchiotludo/akhq:0.25.1
    restart: unless-stopped
    volumes:
    - ./akhq-config.yml:/app/application.yml
    ports:
      - "8090:8080"
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  kafka-ui:
    image: kafbat/kafka-ui:main
    container_name: kafka-ui
    ports:
      - "9000:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: 'main-cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka1:9092,kafka2:9092,kafka3:9092'
      SPRING_CONFIG_ADDITIONAL-LOCATION: /app/application.yml
    volumes:
      - ./kafka-ui-config.yml:/app/application.yml
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  kafka1:
    image: confluentinc/cp-kafka:7.2.0
    container_name: kafka1
    restart: unless-stopped
    ports:
      - "9001:9001"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093,OUTSIDE://0.0.0.0:9001
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,OUTSIDE://127.0.0.1:9001
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka1:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka2:
    image: confluentinc/cp-kafka:7.2.0
    container_name: kafka2
    restart: unless-stopped
    ports:
      - "9002:9002"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093,OUTSIDE://0.0.0.0:9002
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092,OUTSIDE://127.0.0.1:9002
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka2:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka3:
    image: confluentinc/cp-kafka:7.2.0
    container_name: kafka3
    restart: unless-stopped
    ports:
      - "9003:9003"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093,OUTSIDE://0.0.0.0:9003
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092,OUTSIDE://127.0.0.1:9003
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka3:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2.5
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
 
  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: bootstrap
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  cockroachdb:
    image: cockroachdb/cockroach:v23.2.6
    container_name: cockroachdb
    command: start-single-node --insecure --advertise-addr=cockroachdb
    ports:
      - "26257:26257"
      - "8080:8080"
    volumes:
      - cockroach_data:/cockroach/cockroach-data
    healthcheck:
      test: ["CMD", "cockroach", "node", "status", "--insecure"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2024-06-22T05-26-45Z.fips
    container_name: minio
    ports:
      - "8000:9000"
      - "8001:9001"
    environment:
      MINIO_ACCESS_KEY: access_key_minio
      MINIO_SECRET_KEY: secret_key_minio
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  rabbitmq:
    image: rabbitmq:3.13.3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  memcached:
    image: memcached:1.6.10
    container_name: memcached
    ports:
      - "11211:11211"

  etcd:
    image: quay.io/coreos/etcd:v3.5.13
    container_name: etcd
    restart: unless-stopped
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - INITIAL_CLUSTER_TOKEN=etcd-cluster-token
    ports:
      - "2379:2379"
    volumes:
      - etcd_data:/etcd-data

  vault:
    image: vault:1.9.2
    container_name: vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/data

  jaeger:
    container_name: "jaeger"
    restart: unless-stopped
    image: jaegertracing/all-in-one:1.57.0
    ports:
      - "16686:16686"
      - "14268:14268"
      - "4318:4318"

volumes:
  minio_data:
  etcd_data:
  vault_data:
  postgres_data:
  cockroach_data:
